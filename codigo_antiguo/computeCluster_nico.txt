/*
void BicliqueExtractor::computeClusters(){
    posClusters.clear();
    posClusters.push_back(&signatures);
    vector< vector<SignNode*>* > ClustersChild; 
    
    int countA = 0;
    for(size_t i = 0; i < num_signatures; i++){
        for(size_t j = 0; j < posClusters.size(); j++){
            vector<SignNode*>* subSignatures = posClusters[j];

            if(subSignatures->size() > minClusterSize){
                countA++;
            }   
                

            sortSignatures(subSignatures, i);

            SignNode* init = subSignatures->at(0); //primer SignNode
            vector<SignNode*>* miniCluster = new vector<SignNode*>();
            miniCluster->push_back(init);
             
            for(size_t k = 1; k < subSignatures->size(); k++){
                //signNode -> Node -> vector<uint64>.size
                if(subSignatures->at(k)->first->second.size() < minAdyNodes){ //minima cant de nodos ady.
                    continue;
                }

                if(subSignatures->at(k)->second.at(i) == miniCluster->at(0)->second.at(i)){
                    miniCluster->push_back(subSignatures->at(k));
                }
                else{
                    if(miniCluster->size() > minClusterSize) {
                        if( (int)i != num_signatures-1) ClustersChild.push_back(miniCluster); 
                        else{
                            vector< Node* >* new_cluster = new vector<Node*>(); 
                            for(size_t l = 0; l < miniCluster->size(); l++){
                                new_cluster->push_back(miniCluster->at(l)->first);
                            }
                            Cluster *c = new Cluster(new_cluster);
                            clusters.push_back(c);
                        }
                        //miniCluster = NULL;
                    }
                    else delete miniCluster;
                    miniCluster =  new vector<SignNode*>();
                    miniCluster->push_back(subSignatures->at(k));
                                            //vector<signNode>*
                                                //SignNode*
                                                    //vector<uint64_t> MIN
                                                        //i esimo hash
                }
            }
            if(miniCluster->size() > minClusterSize) {
                if( (int)i != num_signatures-1) ClustersChild.push_back(miniCluster); 
                else{
                    vector< Node* >* new_cluster = new vector<Node*>(); 
                    for(size_t l = 0; l < miniCluster->size(); l++){
                        new_cluster->push_back(miniCluster->at(l)->first);
                    }
                    Cluster *c = new Cluster(new_cluster);
                    clusters.push_back(c);
                }
            }
            else delete miniCluster;

            if(i > 0) delete posClusters[j];
        }
        posClusters = ClustersChild;
        ClustersChild.clear();
    }
    cout << "Clusters encontrados: " << clusters.size() << " + " << countA << endl;
    
}*/